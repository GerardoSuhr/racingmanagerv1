{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gerar\\\\Documents\\\\Proyectos\\\\Racing Manager\\\\V1\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { generateCircuitSVG } from './utils/generateCircuitSVG';\nimport CircuitSVG from './components/CircuitSVG';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [circuit, setCircuit] = useState(null);\n  const [pathData, setPathData] = useState('');\n  const [startMarker, setStartMarker] = useState(null);\n  const [debugPoints, setDebugPoints] = useState([]);\n  const [bounds, setBounds] = useState(null);\n  const [selectedCircuitId, setSelectedCircuitId] = useState(1);\n  const [availableCircuits, setAvailableCircuits] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [carPosition, setCarPosition] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [customSpeed, setCustomSpeed] = useState(100);\n  const [completed, setCompleted] = useState(false);\n  const intervalRef = useRef(null);\n  const carPath = useRef([]);\n  const indexRef = useRef(0);\n  const totalLengthRef = useRef(0);\n  useEffect(() => {\n    axios.get(`http://localhost:3001/circuits/${selectedCircuitId}`).then(res => {\n      setCircuit(res.data);\n      const {\n        path,\n        startLine,\n        debugPoints,\n        bounds\n      } = generateCircuitSVG(res.data.sectors, res.data.mini_sectors);\n      setPathData(path);\n      setStartMarker(startLine);\n      setDebugPoints(debugPoints);\n      setBounds(bounds);\n      setCarPosition(null);\n      setElapsedTime(0);\n      setIsRunning(false);\n      setCompleted(false);\n      indexRef.current = 0;\n      if (intervalRef.current) clearInterval(intervalRef.current);\n      setTimeout(() => {\n        const svgPath = document.querySelector('path');\n        if (!svgPath) return;\n        const length = svgPath.getTotalLength();\n        totalLengthRef.current = length;\n        const totalMeters = length;\n        const velocityMps = customSpeed * 1000 / 3600;\n        const intervalMs = 30;\n        const distancePerInterval = velocityMps * (intervalMs / 1000);\n        const steps = Math.min(5000, Math.floor(totalMeters / distancePerInterval));\n        const points = [];\n        for (let i = 0; i <= steps; i++) {\n          const pos = svgPath.getPointAtLength(i * distancePerInterval);\n          points.push({\n            x: pos.x,\n            y: pos.y\n          });\n        }\n        carPath.current = points;\n      }, 100);\n    }).catch(console.error);\n  }, [selectedCircuitId, customSpeed]);\n  useEffect(() => {\n    axios.get('http://localhost:3001/circuits').then(res => setAvailableCircuits(res.data)).catch(console.error);\n  }, []);\n  const startSimulation = () => {\n    if (!carPath.current.length) return;\n    setIsRunning(true);\n    setCompleted(false);\n    const intervalMs = 30;\n    intervalRef.current = setInterval(() => {\n      const i = indexRef.current;\n      if (i >= carPath.current.length) {\n        clearInterval(intervalRef.current);\n        setIsRunning(false);\n        setCompleted(true);\n        return;\n      }\n      setCarPosition(carPath.current[i]);\n      setElapsedTime(prev => prev + intervalMs);\n      indexRef.current += 1;\n    }, intervalMs);\n  };\n  const stopSimulation = () => {\n    clearInterval(intervalRef.current);\n    setIsRunning(false);\n  };\n  const resetSimulation = () => {\n    clearInterval(intervalRef.current);\n    setIsRunning(false);\n    setElapsedTime(0);\n    setCarPosition(null);\n    setCompleted(false);\n    indexRef.current = 0;\n  };\n  const formatTime = ms => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = totalSeconds % 60;\n    return hours > 0 ? `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}` : `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const formatDistance = meters => `${meters.toFixed(0)} m`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Circuit Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [availableCircuits.map(c => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedCircuitId(c.id),\n        disabled: selectedCircuitId === c.id,\n        style: {\n          marginRight: '0.5rem'\n        },\n        children: c.name\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: customSpeed,\n        onChange: e => setCustomSpeed(parseInt(e.target.value) || 0),\n        style: {\n          width: '80px',\n          marginLeft: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), \" km/h\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSimulation,\n        style: {\n          marginLeft: '1rem'\n        },\n        children: isRunning ? 'Resume' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopSimulation,\n        disabled: !isRunning,\n        style: {\n          marginLeft: '0.5rem'\n        },\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetSimulation,\n        style: {\n          marginLeft: '0.5rem'\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), circuit && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [circuit.circuit.name, \" \\u2014 Longitud total: \", formatDistance(totalLengthRef.current)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CircuitSVG, {\n          pathData: pathData,\n          bounds: bounds,\n          startLine: startMarker,\n          debugPoints: debugPoints,\n          carPosition: carPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          paddingLeft: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Datos en tiempo real\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), isRunning && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Tiempo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 20\n            }, this), \" \", formatTime(elapsedTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Velocidad:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 20\n            }, this), \" \", customSpeed, \" km/h\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Distancia:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 20\n            }, this), \" \", formatDistance(indexRef.current / carPath.current.length * totalLengthRef.current || 0)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), completed && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'green'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"\\xA1Vuelta completada en \", formatTime(elapsedTime), \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RNhwWWBvd7w8AnBy8ZvVMo8/bDU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","generateCircuitSVG","CircuitSVG","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","circuit","setCircuit","pathData","setPathData","startMarker","setStartMarker","debugPoints","setDebugPoints","bounds","setBounds","selectedCircuitId","setSelectedCircuitId","availableCircuits","setAvailableCircuits","isRunning","setIsRunning","carPosition","setCarPosition","elapsedTime","setElapsedTime","customSpeed","setCustomSpeed","completed","setCompleted","intervalRef","carPath","indexRef","totalLengthRef","get","then","res","data","path","startLine","sectors","mini_sectors","current","clearInterval","setTimeout","svgPath","document","querySelector","length","getTotalLength","totalMeters","velocityMps","intervalMs","distancePerInterval","steps","Math","min","floor","points","i","pos","getPointAtLength","push","x","y","catch","console","error","startSimulation","setInterval","prev","stopSimulation","resetSimulation","formatTime","ms","totalSeconds","hours","minutes","seconds","toString","padStart","formatDistance","meters","toFixed","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","map","c","onClick","id","disabled","marginRight","name","type","value","onChange","e","parseInt","target","width","marginLeft","display","flex","paddingLeft","color","_c","$RefreshReg$"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { generateCircuitSVG } from './utils/generateCircuitSVG';\nimport CircuitSVG from './components/CircuitSVG';\n\nfunction App() {\n  const [circuit, setCircuit] = useState(null);\n  const [pathData, setPathData] = useState('');\n  const [startMarker, setStartMarker] = useState(null);\n  const [debugPoints, setDebugPoints] = useState([]);\n  const [bounds, setBounds] = useState(null);\n  const [selectedCircuitId, setSelectedCircuitId] = useState(1);\n  const [availableCircuits, setAvailableCircuits] = useState([]);\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [carPosition, setCarPosition] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [customSpeed, setCustomSpeed] = useState(100);\n  const [completed, setCompleted] = useState(false);\n  const intervalRef = useRef(null);\n  const carPath = useRef([]);\n  const indexRef = useRef(0);\n  const totalLengthRef = useRef(0);\n\n  useEffect(() => {\n    axios.get(`http://localhost:3001/circuits/${selectedCircuitId}`)\n      .then(res => {\n        setCircuit(res.data);\n        const { path, startLine, debugPoints, bounds } = generateCircuitSVG(\n          res.data.sectors,\n          res.data.mini_sectors\n        );\n        setPathData(path);\n        setStartMarker(startLine);\n        setDebugPoints(debugPoints);\n        setBounds(bounds);\n        setCarPosition(null);\n        setElapsedTime(0);\n        setIsRunning(false);\n        setCompleted(false);\n        indexRef.current = 0;\n        if (intervalRef.current) clearInterval(intervalRef.current);\n\n        setTimeout(() => {\n          const svgPath = document.querySelector('path');\n          if (!svgPath) return;\n          const length = svgPath.getTotalLength();\n          totalLengthRef.current = length;\n          const totalMeters = length;\n\n          const velocityMps = customSpeed * 1000 / 3600;\n          const intervalMs = 30;\n          const distancePerInterval = velocityMps * (intervalMs / 1000);\n          const steps = Math.min(5000, Math.floor(totalMeters / distancePerInterval));\n\n          const points = [];\n          for (let i = 0; i <= steps; i++) {\n            const pos = svgPath.getPointAtLength(i * distancePerInterval);\n            points.push({ x: pos.x, y: pos.y });\n          }\n\n          carPath.current = points;\n        }, 100);\n      })\n      .catch(console.error);\n  }, [selectedCircuitId, customSpeed]);\n\n  useEffect(() => {\n    axios.get('http://localhost:3001/circuits')\n      .then(res => setAvailableCircuits(res.data))\n      .catch(console.error);\n  }, []);\n\n  const startSimulation = () => {\n    if (!carPath.current.length) return;\n\n    setIsRunning(true);\n    setCompleted(false);\n    const intervalMs = 30;\n    intervalRef.current = setInterval(() => {\n      const i = indexRef.current;\n      if (i >= carPath.current.length) {\n        clearInterval(intervalRef.current);\n        setIsRunning(false);\n        setCompleted(true);\n        return;\n      }\n      setCarPosition(carPath.current[i]);\n      setElapsedTime(prev => prev + intervalMs);\n      indexRef.current += 1;\n    }, intervalMs);\n  };\n\n  const stopSimulation = () => {\n    clearInterval(intervalRef.current);\n    setIsRunning(false);\n  };\n\n  const resetSimulation = () => {\n    clearInterval(intervalRef.current);\n    setIsRunning(false);\n    setElapsedTime(0);\n    setCarPosition(null);\n    setCompleted(false);\n    indexRef.current = 0;\n  };\n\n  const formatTime = (ms) => {\n    const totalSeconds = Math.floor(ms / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n    return hours > 0\n      ? `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n      : `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const formatDistance = (meters) => `${meters.toFixed(0)} m`;\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1>Circuit Viewer</h1>\n\n      <div style={{ marginBottom: '1rem' }}>\n        {availableCircuits.map(c => (\n          <button\n            key={c.id}\n            onClick={() => setSelectedCircuitId(c.id)}\n            disabled={selectedCircuitId === c.id}\n            style={{ marginRight: '0.5rem' }}\n          >\n            {c.name}\n          </button>\n        ))}\n        <input\n          type=\"number\"\n          value={customSpeed}\n          onChange={(e) => setCustomSpeed(parseInt(e.target.value) || 0)}\n          style={{ width: '80px', marginLeft: '1rem' }}\n        /> km/h\n        <button onClick={startSimulation} style={{ marginLeft: '1rem' }}>\n          {isRunning ? 'Resume' : 'Start'}\n        </button>\n        <button onClick={stopSimulation} disabled={!isRunning} style={{ marginLeft: '0.5rem' }}>\n          Stop\n        </button>\n        <button onClick={resetSimulation} style={{ marginLeft: '0.5rem' }}>\n          Reset\n        </button>\n      </div>\n\n      {circuit && (\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: 1 }}>\n            <h2>\n              {circuit.circuit.name} — Longitud total: {formatDistance(totalLengthRef.current)}\n            </h2>\n            <CircuitSVG\n              pathData={pathData}\n              bounds={bounds}\n              startLine={startMarker}\n              debugPoints={debugPoints}\n              carPosition={carPosition}\n            />\n          </div>\n          <div style={{ width: '300px', paddingLeft: '2rem' }}>\n            <h3>Datos en tiempo real</h3>\n            {isRunning && (\n              <>\n                <p><strong>Tiempo:</strong> {formatTime(elapsedTime)}</p>\n                <p><strong>Velocidad:</strong> {customSpeed} km/h</p>\n                <p><strong>Distancia:</strong> {formatDistance(\n                  (indexRef.current / carPath.current.length) * totalLengthRef.current || 0\n                )}</p>\n              </>\n            )}\n            {completed && (\n              <p style={{ color: 'green' }}><strong>¡Vuelta completada en {formatTime(elapsedTime)}!</strong></p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}