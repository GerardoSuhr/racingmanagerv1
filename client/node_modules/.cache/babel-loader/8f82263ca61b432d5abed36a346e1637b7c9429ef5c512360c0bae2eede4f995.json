{"ast":null,"code":"// src/utils/generateCircuitSVG.js\n\nexport function generateCircuitSVG(sectors, miniSectors, options = {}) {\n  var _options$speed;\n  const padding = 50;\n  const points = [];\n  const speeds = [];\n  let x = 0;\n  let y = 0;\n  let angle = 0; // en grados\n  let previousWasCurve = false;\n  const carSpeedKmh = (_options$speed = options.speed) !== null && _options$speed !== void 0 ? _options$speed : 100;\n  const intervalMs = 30;\n  const getSpeedFactor = radius => {\n    if (!radius) return 1;\n    return Math.min(0.99, Math.max(0.5, (radius - 100) / 200 * (0.99 - 0.5) + 0.5));\n  };\n  const toRadians = deg => deg * Math.PI / 180;\n  const addPoint = (px, py, speed) => {\n    points.push({\n      x: px,\n      y: py\n    });\n    speeds.push(speed);\n  };\n  const orderedMiniSectors = sectors.flatMap(sector => sector.mini_sector_ids.map(id => miniSectors.find(ms => ms.id === id))).filter(Boolean);\n  const sectorEndPoints = [];\n  for (let i = 0; i < orderedMiniSectors.length; i++) {\n    const ms = orderedMiniSectors[i];\n    const length = ms.length_cm / 100;\n    const radius = ms.curvature_radius_cm / 100;\n    const speedFactor = getSpeedFactor(radius);\n    const speedKmh = carSpeedKmh * speedFactor;\n    const speedMps = speedKmh * 1000 / 3600;\n    const distancePerStep = speedMps * (intervalMs / 1000);\n    if (radius === 0) {\n      if (typeof ms.direction === 'number' && !isNaN(ms.direction) && !previousWasCurve) {\n        angle = ms.direction;\n      }\n      const dx = length * Math.cos(toRadians(angle));\n      const dy = length * Math.sin(toRadians(angle));\n      const steps = Math.max(1, Math.floor(length / distancePerStep));\n      for (let j = 0; j <= steps; j++) {\n        const px = x + dx * j / steps;\n        const py = y + dy * j / steps;\n        addPoint(px, py, speedKmh);\n      }\n      x += dx;\n      y += dy;\n    } else {\n      var _ms$arc_angle_deg;\n      const arcAngle = (_ms$arc_angle_deg = ms.arc_angle_deg) !== null && _ms$arc_angle_deg !== void 0 ? _ms$arc_angle_deg : 180;\n      const steps = Math.max(1, Math.floor(radius * toRadians(arcAngle) / distancePerStep));\n      const clockwise = ms.curve_direction === 'clockwise';\n      const sign = clockwise ? -1 : 1;\n      const startAngle = toRadians(angle);\n      const cx = x + radius * Math.cos(startAngle + sign * Math.PI / 2);\n      const cy = y + radius * Math.sin(startAngle + sign * Math.PI / 2);\n      for (let j = 1; j <= steps; j++) {\n        const theta = toRadians(arcAngle) * (j / steps);\n        const angleStep = startAngle + sign * theta;\n        const px = cx + radius * Math.cos(angleStep - sign * Math.PI / 2);\n        const py = cy + radius * Math.sin(angleStep - sign * Math.PI / 2);\n        addPoint(px, py, speedKmh);\n      }\n      const endAngle = startAngle + sign * toRadians(arcAngle);\n      x = cx + radius * Math.cos(endAngle - sign * Math.PI / 2);\n      y = cy + radius * Math.sin(endAngle - sign * Math.PI / 2);\n      angle += sign * arcAngle;\n    }\n\n    // Agregar punto final si es el último mini sector de un sector\n    for (let s = 0; s < sectors.length; s++) {\n      const sector = sectors[s];\n      const lastMiniSectorId = sector.mini_sector_ids[sector.mini_sector_ids.length - 1];\n      if (ms.id === lastMiniSectorId) {\n        sectorEndPoints.push({\n          x,\n          y\n        });\n        break;\n      }\n    }\n    previousWasCurve = radius !== 0;\n  }\n  const minX = Math.min(...points.map(p => p.x));\n  const minY = Math.min(...points.map(p => p.y));\n  const maxX = Math.max(...points.map(p => p.x));\n  const maxY = Math.max(...points.map(p => p.y));\n  const offsetX = padding - minX;\n  const offsetY = padding - minY;\n  const translatedPoints = points.map(p => ({\n    x: p.x + offsetX,\n    y: p.y + offsetY\n  }));\n  const translatedSectorEnds = sectorEndPoints.map(p => ({\n    x: p.x + offsetX,\n    y: p.y + offsetY\n  }));\n  const svgPathFromPoints = pts => {\n    if (!pts.length) return '';\n    let d = `M ${pts[0].x} ${pts[0].y}`;\n    for (let i = 1; i < pts.length; i++) {\n      d += ` L ${pts[i].x} ${pts[i].y}`;\n    }\n    return d;\n  };\n  const startLine = {\n    x1: translatedPoints[0].x - 5,\n    y1: translatedPoints[0].y - 5,\n    x2: translatedPoints[0].x + 5,\n    y2: translatedPoints[0].y + 5\n  };\n  return {\n    path: svgPathFromPoints(translatedPoints),\n    startLine,\n    bounds: {\n      width: maxX - minX + 2 * padding,\n      height: maxY - minY + 2 * padding,\n      minX,\n      minY\n    },\n    carPoints: translatedPoints,\n    carSpeeds: speeds,\n    sectorEndPoints: translatedSectorEnds\n  };\n}","map":{"version":3,"names":["generateCircuitSVG","sectors","miniSectors","options","_options$speed","padding","points","speeds","x","y","angle","previousWasCurve","carSpeedKmh","speed","intervalMs","getSpeedFactor","radius","Math","min","max","toRadians","deg","PI","addPoint","px","py","push","orderedMiniSectors","flatMap","sector","mini_sector_ids","map","id","find","ms","filter","Boolean","sectorEndPoints","i","length","length_cm","curvature_radius_cm","speedFactor","speedKmh","speedMps","distancePerStep","direction","isNaN","dx","cos","dy","sin","steps","floor","j","_ms$arc_angle_deg","arcAngle","arc_angle_deg","clockwise","curve_direction","sign","startAngle","cx","cy","theta","angleStep","endAngle","s","lastMiniSectorId","minX","p","minY","maxX","maxY","offsetX","offsetY","translatedPoints","translatedSectorEnds","svgPathFromPoints","pts","d","startLine","x1","y1","x2","y2","path","bounds","width","height","carPoints","carSpeeds"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/utils/generateCircuitSVG.js"],"sourcesContent":["// src/utils/generateCircuitSVG.js\r\n\r\nexport function generateCircuitSVG(sectors, miniSectors, options = {}) {\r\n  const padding = 50;\r\n  const points = [];\r\n  const speeds = [];\r\n\r\n  let x = 0;\r\n  let y = 0;\r\n  let angle = 0; // en grados\r\n  let previousWasCurve = false;\r\n\r\n  const carSpeedKmh = options.speed ?? 100;\r\n  const intervalMs = 30;\r\n\r\n  const getSpeedFactor = (radius) => {\r\n    if (!radius) return 1;\r\n    return Math.min(0.99, Math.max(0.5, ((radius - 100) / 200) * (0.99 - 0.5) + 0.5));\r\n  };\r\n\r\n  const toRadians = (deg) => (deg * Math.PI) / 180;\r\n\r\n  const addPoint = (px, py, speed) => {\r\n    points.push({ x: px, y: py });\r\n    speeds.push(speed);\r\n  };\r\n\r\n  const orderedMiniSectors = sectors\r\n    .flatMap(sector => sector.mini_sector_ids.map(id => miniSectors.find(ms => ms.id === id)))\r\n    .filter(Boolean);\r\n\r\n  const sectorEndPoints = [];\r\n\r\n  for (let i = 0; i < orderedMiniSectors.length; i++) {\r\n    const ms = orderedMiniSectors[i];\r\n    const length = ms.length_cm / 100;\r\n    const radius = ms.curvature_radius_cm / 100;\r\n    const speedFactor = getSpeedFactor(radius);\r\n    const speedKmh = carSpeedKmh * speedFactor;\r\n    const speedMps = speedKmh * 1000 / 3600;\r\n    const distancePerStep = speedMps * (intervalMs / 1000);\r\n\r\n    if (radius === 0) {\r\n      if (\r\n        typeof ms.direction === 'number' &&\r\n        !isNaN(ms.direction) &&\r\n        !previousWasCurve\r\n      ) {\r\n        angle = ms.direction;\r\n      }\r\n\r\n      const dx = length * Math.cos(toRadians(angle));\r\n      const dy = length * Math.sin(toRadians(angle));\r\n      const steps = Math.max(1, Math.floor(length / distancePerStep));\r\n\r\n      for (let j = 0; j <= steps; j++) {\r\n        const px = x + (dx * j) / steps;\r\n        const py = y + (dy * j) / steps;\r\n        addPoint(px, py, speedKmh);\r\n      }\r\n\r\n      x += dx;\r\n      y += dy;\r\n    } else {\r\n      const arcAngle = ms.arc_angle_deg ?? 180;\r\n      const steps = Math.max(1, Math.floor((radius * toRadians(arcAngle)) / distancePerStep));\r\n      const clockwise = ms.curve_direction === 'clockwise';\r\n      const sign = clockwise ? -1 : 1;\r\n\r\n      const startAngle = toRadians(angle);\r\n      const cx = x + radius * Math.cos(startAngle + sign * Math.PI / 2);\r\n      const cy = y + radius * Math.sin(startAngle + sign * Math.PI / 2);\r\n\r\n      for (let j = 1; j <= steps; j++) {\r\n        const theta = toRadians(arcAngle) * (j / steps);\r\n        const angleStep = startAngle + sign * theta;\r\n        const px = cx + radius * Math.cos(angleStep - sign * Math.PI / 2);\r\n        const py = cy + radius * Math.sin(angleStep - sign * Math.PI / 2);\r\n        addPoint(px, py, speedKmh);\r\n      }\r\n\r\n      const endAngle = startAngle + sign * toRadians(arcAngle);\r\n      x = cx + radius * Math.cos(endAngle - sign * Math.PI / 2);\r\n      y = cy + radius * Math.sin(endAngle - sign * Math.PI / 2);\r\n      angle += sign * arcAngle;\r\n    }\r\n\r\n    // Agregar punto final si es el último mini sector de un sector\r\n    for (let s = 0; s < sectors.length; s++) {\r\n      const sector = sectors[s];\r\n      const lastMiniSectorId = sector.mini_sector_ids[sector.mini_sector_ids.length - 1];\r\n      if (ms.id === lastMiniSectorId) {\r\n        sectorEndPoints.push({ x, y });\r\n        break;\r\n      }\r\n    }\r\n\r\n    previousWasCurve = radius !== 0;\r\n  }\r\n\r\n  const minX = Math.min(...points.map(p => p.x));\r\n  const minY = Math.min(...points.map(p => p.y));\r\n  const maxX = Math.max(...points.map(p => p.x));\r\n  const maxY = Math.max(...points.map(p => p.y));\r\n\r\n  const offsetX = padding - minX;\r\n  const offsetY = padding - minY;\r\n\r\n  const translatedPoints = points.map(p => ({ x: p.x + offsetX, y: p.y + offsetY }));\r\n  const translatedSectorEnds = sectorEndPoints.map(p => ({ x: p.x + offsetX, y: p.y + offsetY }));\r\n\r\n  const svgPathFromPoints = (pts) => {\r\n    if (!pts.length) return '';\r\n    let d = `M ${pts[0].x} ${pts[0].y}`;\r\n    for (let i = 1; i < pts.length; i++) {\r\n      d += ` L ${pts[i].x} ${pts[i].y}`;\r\n    }\r\n    return d;\r\n  };\r\n\r\n  const startLine = {\r\n    x1: translatedPoints[0].x - 5,\r\n    y1: translatedPoints[0].y - 5,\r\n    x2: translatedPoints[0].x + 5,\r\n    y2: translatedPoints[0].y + 5\r\n  };\r\n\r\n  return {\r\n    path: svgPathFromPoints(translatedPoints),\r\n    startLine,\r\n    bounds: {\r\n      width: maxX - minX + 2 * padding,\r\n      height: maxY - minY + 2 * padding,\r\n      minX,\r\n      minY\r\n    },\r\n    carPoints: translatedPoints,\r\n    carSpeeds: speeds,\r\n    sectorEndPoints: translatedSectorEnds\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}