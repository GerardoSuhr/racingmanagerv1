{"ast":null,"code":"// src/utils/generateCircuitSVG.js\n\nexport function generateCircuitSVG(sectors, miniSectors, options = {}) {\n  var _options$speed;\n  const padding = 50;\n  const debugPoints = [];\n  const points = [];\n  const speeds = [];\n  let x = 0;\n  let y = 0;\n  let angle = 0; // in degrees\n\n  const carSpeedKmh = (_options$speed = options.speed) !== null && _options$speed !== void 0 ? _options$speed : 100;\n  const intervalMs = 30;\n  const getSpeedFactor = radius => {\n    if (!radius) return 1;\n    return Math.min(0.99, Math.max(0.5, (radius - 100) / 200 * (0.99 - 0.5) + 0.5));\n  };\n  const toRadians = deg => deg * Math.PI / 180;\n  const addPoint = (px, py, speed) => {\n    points.push({\n      x: px,\n      y: py\n    });\n    speeds.push(speed);\n  };\n  const orderedMiniSectors = sectors.flatMap(sector => sector.mini_sector_ids.map(id => miniSectors.find(ms => ms.id === id))).filter(Boolean);\n  for (let ms of orderedMiniSectors) {\n    const length = ms.length_cm / 100;\n    const radius = ms.curvature_radius_cm / 100;\n    const speedFactor = getSpeedFactor(radius);\n    const speedKmh = carSpeedKmh * speedFactor;\n    const speedMps = speedKmh * 1000 / 3600;\n    const distancePerStep = speedMps * (intervalMs / 1000);\n    if (radius === 0) {\n      // Recta\n      if (radius === 0 && typeof ms.direction === 'number' && !isNaN(ms.direction)) {\n        // Solo forzamos un ángulo si explícitamente se indica\n        angle = ms.direction;\n      }\n      const dx = length * Math.cos(toRadians(angle));\n      const dy = length * Math.sin(toRadians(angle));\n      const steps = Math.max(1, Math.floor(length / distancePerStep));\n      for (let i = 0; i <= steps; i++) {\n        const px = x + dx * i / steps;\n        const py = y + dy * i / steps;\n        addPoint(px, py, speedKmh);\n      }\n      x += dx;\n      y += dy;\n    } else {\n      var _ms$arc_angle_deg;\n      // Curva\n      const arcAngle = (_ms$arc_angle_deg = ms.arc_angle_deg) !== null && _ms$arc_angle_deg !== void 0 ? _ms$arc_angle_deg : 180;\n      const steps = Math.max(1, Math.floor(radius * toRadians(arcAngle) / distancePerStep));\n      const clockwise = ms.curve_direction === 'clockwise';\n      const sign = clockwise ? -1 : 1;\n      console.log(`  ➤ angle += ${sign * arcAngle} => ${angle}`);\n      console.log(`  arc_angle_deg: ${ms.arc_angle_deg}`);\n      const startAngle = toRadians(angle % 360);\n      const cx = x + radius * Math.cos(startAngle + sign * Math.PI / 2);\n      const cy = y + radius * Math.sin(startAngle + sign * Math.PI / 2);\n      for (let i = 1; i <= steps; i++) {\n        const theta = toRadians(arcAngle) * (i / steps);\n        const angleStep = startAngle + sign * theta;\n        const px = cx + radius * Math.cos(angleStep - sign * Math.PI / 2);\n        const py = cy + radius * Math.sin(angleStep - sign * Math.PI / 2);\n        addPoint(px, py, speedKmh);\n      }\n      const endAngle = startAngle + sign * toRadians(arcAngle);\n      x = cx + radius * Math.cos(endAngle - sign * Math.PI / 2);\n      y = cy + radius * Math.sin(endAngle - sign * Math.PI / 2);\n      angle += sign * arcAngle;\n      console.log(`MiniSector ${ms.id} | Arc: ${arcAngle}° | Dir: ${ms.curve_direction} | New angle: ${angle}°`);\n    }\n    debugPoints.push({\n      x,\n      y\n    });\n  }\n  const minX = Math.min(...points.map(p => p.x));\n  const minY = Math.min(...points.map(p => p.y));\n  const maxX = Math.max(...points.map(p => p.x));\n  const maxY = Math.max(...points.map(p => p.y));\n  const offsetX = padding - minX;\n  const offsetY = padding - minY;\n  const translatedPoints = points.map(p => ({\n    x: p.x + offsetX,\n    y: p.y + offsetY\n  }));\n  const translatedDebugPoints = debugPoints.map(p => ({\n    x: p.x + offsetX,\n    y: p.y + offsetY\n  }));\n  const svgPathFromPoints = pts => {\n    if (!pts.length) return '';\n    let d = `M ${pts[0].x} ${pts[0].y}`;\n    for (let i = 1; i < pts.length; i++) {\n      d += ` L ${pts[i].x} ${pts[i].y}`;\n    }\n    return d;\n  };\n  const startLine = {\n    x1: translatedPoints[0].x - 5,\n    y1: translatedPoints[0].y - 5,\n    x2: translatedPoints[0].x + 5,\n    y2: translatedPoints[0].y + 5\n  };\n  return {\n    path: svgPathFromPoints(translatedPoints),\n    startLine,\n    debugPoints: translatedDebugPoints,\n    bounds: {\n      width: maxX - minX + 2 * padding,\n      height: maxY - minY + 2 * padding,\n      minX,\n      minY\n    },\n    carPoints: translatedPoints,\n    carSpeeds: speeds\n  };\n}","map":{"version":3,"names":["generateCircuitSVG","sectors","miniSectors","options","_options$speed","padding","debugPoints","points","speeds","x","y","angle","carSpeedKmh","speed","intervalMs","getSpeedFactor","radius","Math","min","max","toRadians","deg","PI","addPoint","px","py","push","orderedMiniSectors","flatMap","sector","mini_sector_ids","map","id","find","ms","filter","Boolean","length","length_cm","curvature_radius_cm","speedFactor","speedKmh","speedMps","distancePerStep","direction","isNaN","dx","cos","dy","sin","steps","floor","i","_ms$arc_angle_deg","arcAngle","arc_angle_deg","clockwise","curve_direction","sign","console","log","startAngle","cx","cy","theta","angleStep","endAngle","minX","p","minY","maxX","maxY","offsetX","offsetY","translatedPoints","translatedDebugPoints","svgPathFromPoints","pts","d","startLine","x1","y1","x2","y2","path","bounds","width","height","carPoints","carSpeeds"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/utils/generateCircuitSVG.js"],"sourcesContent":["// src/utils/generateCircuitSVG.js\r\n\r\nexport function generateCircuitSVG(sectors, miniSectors, options = {}) {\r\n  const padding = 50;\r\n  const debugPoints = [];\r\n  const points = [];\r\n  const speeds = [];\r\n\r\n  let x = 0;\r\n  let y = 0;\r\n  let angle = 0; // in degrees\r\n\r\n  const carSpeedKmh = options.speed ?? 100;\r\n  const intervalMs = 30;\r\n\r\n  const getSpeedFactor = (radius) => {\r\n    if (!radius) return 1;\r\n    return Math.min(0.99, Math.max(0.5, ((radius - 100) / 200) * (0.99 - 0.5) + 0.5));\r\n  };\r\n\r\n  const toRadians = (deg) => (deg * Math.PI) / 180;\r\n\r\n  const addPoint = (px, py, speed) => {\r\n    points.push({ x: px, y: py });\r\n    speeds.push(speed);\r\n  };\r\n\r\n  const orderedMiniSectors = sectors\r\n    .flatMap(sector => sector.mini_sector_ids.map(id => miniSectors.find(ms => ms.id === id)))\r\n    .filter(Boolean);\r\n\r\n  for (let ms of orderedMiniSectors) {\r\n    const length = ms.length_cm / 100;\r\n    const radius = ms.curvature_radius_cm / 100;\r\n    const speedFactor = getSpeedFactor(radius);\r\n    const speedKmh = carSpeedKmh * speedFactor;\r\n    const speedMps = speedKmh * 1000 / 3600;\r\n    const distancePerStep = speedMps * (intervalMs / 1000);\r\n\r\n    if (radius === 0) {\r\n      // Recta\r\n      if (radius === 0 && typeof ms.direction === 'number' && !isNaN(ms.direction)) {\r\n        // Solo forzamos un ángulo si explícitamente se indica\r\n        angle = ms.direction;\r\n      }\r\n\r\n      const dx = length * Math.cos(toRadians(angle));\r\n      const dy = length * Math.sin(toRadians(angle));\r\n      const steps = Math.max(1, Math.floor(length / distancePerStep));\r\n\r\n      for (let i = 0; i <= steps; i++) {\r\n        const px = x + (dx * i) / steps;\r\n        const py = y + (dy * i) / steps;\r\n        addPoint(px, py, speedKmh);\r\n      }\r\n\r\n      x += dx;\r\n      y += dy;\r\n    } else {\r\n      // Curva\r\n      const arcAngle = ms.arc_angle_deg ?? 180;\r\n      const steps = Math.max(1, Math.floor((radius * toRadians(arcAngle)) / distancePerStep));\r\n      const clockwise = ms.curve_direction === 'clockwise';\r\n      const sign = clockwise ? -1 : 1;\r\n      console.log(`  ➤ angle += ${sign * arcAngle} => ${angle}`);\r\n      console.log(`  arc_angle_deg: ${ms.arc_angle_deg}`);\r\n\r\n      const startAngle = toRadians(angle % 360);\r\n      const cx = x + radius * Math.cos(startAngle + sign * Math.PI / 2);\r\n      const cy = y + radius * Math.sin(startAngle + sign * Math.PI / 2);\r\n\r\n      for (let i = 1; i <= steps; i++) {\r\n        const theta = toRadians(arcAngle) * (i / steps);\r\n        const angleStep = startAngle + sign * theta;\r\n        const px = cx + radius * Math.cos(angleStep - sign * Math.PI / 2);\r\n        const py = cy + radius * Math.sin(angleStep - sign * Math.PI / 2);\r\n        addPoint(px, py, speedKmh);\r\n      }\r\n\r\n      const endAngle = startAngle + sign * toRadians(arcAngle);\r\n      x = cx + radius * Math.cos(endAngle - sign * Math.PI / 2);\r\n      y = cy + radius * Math.sin(endAngle - sign * Math.PI / 2);\r\n      angle += sign * arcAngle;\r\n      console.log(\r\n        `MiniSector ${ms.id} | Arc: ${arcAngle}° | Dir: ${ms.curve_direction} | New angle: ${angle}°`\r\n      );\r\n    }\r\n\r\n    debugPoints.push({ x, y });\r\n  }\r\n\r\n  const minX = Math.min(...points.map(p => p.x));\r\n  const minY = Math.min(...points.map(p => p.y));\r\n  const maxX = Math.max(...points.map(p => p.x));\r\n  const maxY = Math.max(...points.map(p => p.y));\r\n\r\n  const offsetX = padding - minX;\r\n  const offsetY = padding - minY;\r\n\r\n  const translatedPoints = points.map(p => ({ x: p.x + offsetX, y: p.y + offsetY }));\r\n  const translatedDebugPoints = debugPoints.map(p => ({ x: p.x + offsetX, y: p.y + offsetY }));\r\n\r\n  const svgPathFromPoints = (pts) => {\r\n    if (!pts.length) return '';\r\n    let d = `M ${pts[0].x} ${pts[0].y}`;\r\n    for (let i = 1; i < pts.length; i++) {\r\n      d += ` L ${pts[i].x} ${pts[i].y}`;\r\n    }\r\n    return d;\r\n  };\r\n\r\n  const startLine = {\r\n    x1: translatedPoints[0].x - 5,\r\n    y1: translatedPoints[0].y - 5,\r\n    x2: translatedPoints[0].x + 5,\r\n    y2: translatedPoints[0].y + 5\r\n  };\r\n\r\n  return {\r\n    path: svgPathFromPoints(translatedPoints),\r\n    startLine,\r\n    debugPoints: translatedDebugPoints,\r\n    bounds: {\r\n      width: maxX - minX + 2 * padding,\r\n      height: maxY - minY + 2 * padding,\r\n      minX,\r\n      minY\r\n    },\r\n    carPoints: translatedPoints,\r\n    carSpeeds: speeds\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}