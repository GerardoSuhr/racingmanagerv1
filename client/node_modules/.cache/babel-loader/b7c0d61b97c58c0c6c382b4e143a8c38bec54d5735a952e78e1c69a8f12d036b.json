{"ast":null,"code":"// generateCircuitSVG.js\nconst SCALE = 0.01;\nexport function generateCircuitSVG(sectors, allMiniSectors) {\n  if (!sectors || sectors.length === 0) return {\n    path: '',\n    startLine: null,\n    debugPoints: [],\n    bounds: null\n  };\n  const firstSector = sectors[0];\n  const firstMiniSectorId = firstSector.mini_sector_ids[0];\n  const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\n  let x = 300;\n  let y = 200;\n  let angle = 0;\n  let d = `M ${x} ${y}`;\n  let debugPoints = [{\n    x,\n    y\n  }];\n  let startLine = null;\n  let minX = x;\n  let maxX = x;\n  let minY = y;\n  let maxY = y;\n  for (let sector of allMiniSectors) {\n    const isCurve = sector.curvature_radius_cm > 0;\n    if (sector.id === firstMini.id) {\n      startLine = {\n        x,\n        y,\n        angle\n      };\n    }\n    if (!isCurve) {\n      var _sector$direction;\n      const length = sector.length_cm * SCALE;\n      const dx = Math.cos(angle * Math.PI / 180) * length;\n      const dy = Math.sin(angle * Math.PI / 180) * length;\n      x += dx;\n      y += dy;\n      d += ` L ${x} ${y}`;\n      angle = (_sector$direction = sector.direction) !== null && _sector$direction !== void 0 ? _sector$direction : angle;\n      debugPoints.push({\n        x,\n        y\n      });\n    } else {\n      var _sector$arc_angle_deg;\n      const radius = sector.curvature_radius_cm * SCALE;\n      const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\n      const arcAngleDeg = (_sector$arc_angle_deg = sector.arc_angle_deg) !== null && _sector$arc_angle_deg !== void 0 ? _sector$arc_angle_deg : 180;\n      const largeArcFlag = arcAngleDeg > 180 ? 1 : 0;\n      const centerAngle = angle + (sweepFlag === 1 ? 90 : -90);\n      const cx = x + Math.cos(centerAngle * Math.PI / 180) * radius;\n      const cy = y + Math.sin(centerAngle * Math.PI / 180) * radius;\n      const endAngle = angle + (sweepFlag === 1 ? arcAngleDeg : -arcAngleDeg);\n      const finalAngleFromCenter = endAngle + (sweepFlag === 1 ? -90 : 90);\n      const endX = cx + radius * Math.cos(finalAngleFromCenter * Math.PI / 180);\n      const endY = cy + radius * Math.sin(finalAngleFromCenter * Math.PI / 180);\n      d += ` A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${endX} ${endY}`;\n      x = endX;\n      y = endY;\n      angle = (endAngle + 360) % 360;\n      debugPoints.push({\n        x,\n        y\n      });\n    }\n    minX = Math.min(minX, x);\n    maxX = Math.max(maxX, x);\n    minY = Math.min(minY, y);\n    maxY = Math.max(maxY, y);\n  }\n  return {\n    path: d,\n    startLine,\n    debugPoints,\n    bounds: {\n      minX,\n      maxX,\n      minY,\n      maxY\n    }\n  };\n}","map":{"version":3,"names":["SCALE","generateCircuitSVG","sectors","allMiniSectors","length","path","startLine","debugPoints","bounds","firstSector","firstMiniSectorId","mini_sector_ids","firstMini","find","ms","id","x","y","angle","d","minX","maxX","minY","maxY","sector","isCurve","curvature_radius_cm","_sector$direction","length_cm","dx","Math","cos","PI","dy","sin","direction","push","_sector$arc_angle_deg","radius","sweepFlag","curve_direction","arcAngleDeg","arc_angle_deg","largeArcFlag","centerAngle","cx","cy","endAngle","finalAngleFromCenter","endX","endY","min","max"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/utils/generateCircuitSVG.js"],"sourcesContent":["// generateCircuitSVG.js\r\nconst SCALE = 0.01;\r\n\r\nexport function generateCircuitSVG(sectors, allMiniSectors) {\r\n  if (!sectors || sectors.length === 0) return { path: '', startLine: null, debugPoints: [], bounds: null };\r\n\r\n  const firstSector = sectors[0];\r\n  const firstMiniSectorId = firstSector.mini_sector_ids[0];\r\n  const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\r\n\r\n  let x = 300;\r\n  let y = 200;\r\n  let angle = 0;\r\n  let d = `M ${x} ${y}`;\r\n  let debugPoints = [{ x, y }];\r\n  let startLine = null;\r\n\r\n  let minX = x;\r\n  let maxX = x;\r\n  let minY = y;\r\n  let maxY = y;\r\n\r\n  for (let sector of allMiniSectors) {\r\n    const isCurve = sector.curvature_radius_cm > 0;\r\n\r\n    if (sector.id === firstMini.id) {\r\n      startLine = { x, y, angle };\r\n    }\r\n\r\n    if (!isCurve) {\r\n      const length = sector.length_cm * SCALE;\r\n      const dx = Math.cos(angle * Math.PI / 180) * length;\r\n      const dy = Math.sin(angle * Math.PI / 180) * length;\r\n\r\n      x += dx;\r\n      y += dy;\r\n      d += ` L ${x} ${y}`;\r\n      angle = sector.direction ?? angle;\r\n\r\n      debugPoints.push({ x, y });\r\n    } else {\r\n      const radius = sector.curvature_radius_cm * SCALE;\r\n      const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\r\n      const arcAngleDeg = sector.arc_angle_deg ?? 180;\r\n      const largeArcFlag = arcAngleDeg > 180 ? 1 : 0;\r\n\r\n      const centerAngle = angle + (sweepFlag === 1 ? 90 : -90);\r\n      const cx = x + Math.cos(centerAngle * Math.PI / 180) * radius;\r\n      const cy = y + Math.sin(centerAngle * Math.PI / 180) * radius;\r\n\r\n      const endAngle = angle + (sweepFlag === 1 ? arcAngleDeg : -arcAngleDeg);\r\n      const finalAngleFromCenter = endAngle + (sweepFlag === 1 ? -90 : 90);\r\n      const endX = cx + radius * Math.cos(finalAngleFromCenter * Math.PI / 180);\r\n      const endY = cy + radius * Math.sin(finalAngleFromCenter * Math.PI / 180);\r\n\r\n      d += ` A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${endX} ${endY}`;\r\n\r\n      x = endX;\r\n      y = endY;\r\n      angle = (endAngle + 360) % 360;\r\n\r\n      debugPoints.push({ x, y });\r\n    }\r\n\r\n    minX = Math.min(minX, x);\r\n    maxX = Math.max(maxX, x);\r\n    minY = Math.min(minY, y);\r\n    maxY = Math.max(maxY, y);\r\n  }\r\n\r\n  return {\r\n    path: d,\r\n    startLine,\r\n    debugPoints,\r\n    bounds: { minX, maxX, minY, maxY },\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}