{"ast":null,"code":"const SCALE = 0.01;\nexport function generateCircuitSVG(sectors, allMiniSectors) {\n  if (!sectors || sectors.length === 0) return {\n    path: '',\n    startLine: null,\n    debugPoints: []\n  };\n  const firstSector = sectors[0];\n  const firstMiniSectorId = firstSector.mini_sector_ids[0];\n  const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\n  let x = 300;\n  let y = 200;\n  let angle = 0;\n  let d = `M ${x} ${y}`;\n  let debugPoints = [{\n    x,\n    y\n  }];\n  let startLine = null;\n  for (let sector of allMiniSectors) {\n    const isCurve = sector.curvature_radius_cm > 0;\n    if (sector.id === firstMini.id) {\n      startLine = {\n        x,\n        y,\n        angle\n      };\n    }\n    if (!isCurve) {\n      var _sector$direction;\n      const length = sector.length_cm * SCALE;\n      const dx = Math.cos(angle * Math.PI / 180) * length;\n      const dy = Math.sin(angle * Math.PI / 180) * length;\n      x += dx;\n      y += dy;\n      d += ` L ${x} ${y}`;\n      angle = (_sector$direction = sector.direction) !== null && _sector$direction !== void 0 ? _sector$direction : angle;\n      debugPoints.push({\n        x,\n        y\n      });\n    } else {\n      var _sector$arc_angle_deg;\n      const radius = sector.curvature_radius_cm * SCALE;\n      const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\n      const arcAngleDeg = (_sector$arc_angle_deg = sector.arc_angle_deg) !== null && _sector$arc_angle_deg !== void 0 ? _sector$arc_angle_deg : 180;\n      const largeArcFlag = arcAngleDeg > 180 ? 1 : 0;\n\n      // Calcular centro del arco\n      const centerAngle = angle + (sweepFlag === 1 ? 90 : -90);\n      const cx = x + radius * Math.cos(centerAngle * Math.PI / 180);\n      const cy = y + radius * Math.sin(centerAngle * Math.PI / 180);\n\n      // Calcular ángulo final absoluto\n      const endAngle = angle + (sweepFlag === 1 ? arcAngleDeg : -arcAngleDeg);\n\n      // Calcular punto final del arco desde el centro\n      const finalAngleFromCenter = endAngle + (sweepFlag === 1 ? -90 : 90);\n      const endX = cx + radius * Math.cos(finalAngleFromCenter * Math.PI / 180);\n      const endY = cy + radius * Math.sin(finalAngleFromCenter * Math.PI / 180);\n      d += ` A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${endX} ${endY}`;\n      x = endX;\n      y = endY;\n      angle = (endAngle + 360) % 360;\n      debugPoints.push({\n        x,\n        y\n      });\n    }\n  }\n  return {\n    path: d,\n    startLine,\n    debugPoints\n  };\n}","map":{"version":3,"names":["SCALE","generateCircuitSVG","sectors","allMiniSectors","length","path","startLine","debugPoints","firstSector","firstMiniSectorId","mini_sector_ids","firstMini","find","ms","id","x","y","angle","d","sector","isCurve","curvature_radius_cm","_sector$direction","length_cm","dx","Math","cos","PI","dy","sin","direction","push","_sector$arc_angle_deg","radius","sweepFlag","curve_direction","arcAngleDeg","arc_angle_deg","largeArcFlag","centerAngle","cx","cy","endAngle","finalAngleFromCenter","endX","endY"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/utils/generateCircuitSVG.js"],"sourcesContent":["const SCALE = 0.01;\r\n\r\nexport function generateCircuitSVG(sectors, allMiniSectors) {\r\n  if (!sectors || sectors.length === 0) return { path: '', startLine: null, debugPoints: [] };\r\n\r\n  const firstSector = sectors[0];\r\n  const firstMiniSectorId = firstSector.mini_sector_ids[0];\r\n  const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\r\n\r\n  let x = 300;\r\n  let y = 200;\r\n  let angle = 0;\r\n  let d = `M ${x} ${y}`;\r\n  let debugPoints = [{ x, y }];\r\n  let startLine = null;\r\n\r\n  for (let sector of allMiniSectors) {\r\n    const isCurve = sector.curvature_radius_cm > 0;\r\n\r\n    if (sector.id === firstMini.id) {\r\n      startLine = { x, y, angle };\r\n    }\r\n\r\n    if (!isCurve) {\r\n      const length = sector.length_cm * SCALE;\r\n      const dx = Math.cos(angle * Math.PI / 180) * length;\r\n      const dy = Math.sin(angle * Math.PI / 180) * length;\r\n\r\n      x += dx;\r\n      y += dy;\r\n      d += ` L ${x} ${y}`;\r\n      angle = sector.direction ?? angle;\r\n\r\n      debugPoints.push({ x, y });\r\n    } else {\r\n      const radius = sector.curvature_radius_cm * SCALE;\r\n      const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\r\n      const arcAngleDeg = sector.arc_angle_deg ?? 180;\r\n      const largeArcFlag = arcAngleDeg > 180 ? 1 : 0;\r\n\r\n      // Calcular centro del arco\r\n      const centerAngle = angle + (sweepFlag === 1 ? 90 : -90);\r\n      const cx = x + radius * Math.cos(centerAngle * Math.PI / 180);\r\n      const cy = y + radius * Math.sin(centerAngle * Math.PI / 180);\r\n\r\n      // Calcular ángulo final absoluto\r\n      const endAngle = angle + (sweepFlag === 1 ? arcAngleDeg : -arcAngleDeg);\r\n\r\n      // Calcular punto final del arco desde el centro\r\n      const finalAngleFromCenter = endAngle + (sweepFlag === 1 ? -90 : 90);\r\n      const endX = cx + radius * Math.cos(finalAngleFromCenter * Math.PI / 180);\r\n      const endY = cy + radius * Math.sin(finalAngleFromCenter * Math.PI / 180);\r\n\r\n      d += ` A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${endX} ${endY}`;\r\n\r\n      x = endX;\r\n      y = endY;\r\n      angle = (endAngle + 360) % 360;\r\n\r\n      debugPoints.push({ x, y });\r\n    }\r\n  }\r\n\r\n  return { path: d, startLine, debugPoints };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}