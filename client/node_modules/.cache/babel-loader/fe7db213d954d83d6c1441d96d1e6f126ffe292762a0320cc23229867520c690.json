{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gerar\\\\Documents\\\\Proyectos\\\\Racing Manager\\\\V1\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SCALE = 0.01; // 1 cm = 0.01 px => 1 m = 1 px aprox\n\nfunction App() {\n  _s();\n  const [circuit, setCircuit] = useState(null);\n  const [pathData, setPathData] = useState('');\n  const [startMarker, setStartMarker] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:3001/circuit/1').then(res => {\n      setCircuit(res.data);\n      const {\n        path,\n        startLine\n      } = generateCircuitSVG(res.data.sectors, res.data.mini_sectors);\n      setPathData(path);\n      setStartMarker(startLine);\n    }).catch(console.error);\n  }, []);\n  const generateCircuitSVG = (sectors, allMiniSectors) => {\n    if (!sectors || sectors.length === 0) return {\n      path: '',\n      startLine: null\n    };\n\n    // Obtener el primer mini sector del primer sector\n    const firstSector = sectors[0];\n    const firstMiniSectorId = firstSector.mini_sector_ids[0];\n    const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\n    let x = 300;\n    let y = 200;\n    let angle = 0;\n    let d = `M ${x} ${y}`;\n    let startLine = null; // { x, y, angle }\n\n    for (let sector of allMiniSectors) {\n      const isCurve = sector.curvature_radius_cm > 0;\n\n      // Marcar punto de meta justo antes de recorrer el primer mini sector\n      if (sector.id === firstMini.id) {\n        startLine = {\n          x,\n          y,\n          angle\n        };\n      }\n      if (!isCurve) {\n        var _sector$direction;\n        const length = sector.length_cm * SCALE;\n        const dx = Math.cos(angle * Math.PI / 180) * length;\n        const dy = Math.sin(angle * Math.PI / 180) * length;\n        x += dx;\n        y += dy;\n        d += ` L ${x} ${y}`;\n        angle = (_sector$direction = sector.direction) !== null && _sector$direction !== void 0 ? _sector$direction : angle;\n      } else {\n        const radius = sector.curvature_radius_cm * SCALE;\n        const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\n        const normalAngle = angle + (sweepFlag === 1 ? 90 : -90);\n        const cx = x + radius * Math.cos(normalAngle * Math.PI / 180);\n        const cy = y + radius * Math.sin(normalAngle * Math.PI / 180);\n        const endAngle = angle + (sweepFlag === 1 ? 180 : -180);\n        const x1 = cx + radius * Math.cos((endAngle + (sweepFlag === 1 ? -90 : 90)) * Math.PI / 180);\n        const y1 = cy + radius * Math.sin((endAngle + (sweepFlag === 1 ? -90 : 90)) * Math.PI / 180);\n        d += ` A ${radius} ${radius} 0 0 ${sweepFlag} ${x1} ${y1}`;\n        x = x1;\n        y = y1;\n        angle = (endAngle + 360) % 360;\n      }\n    }\n    return {\n      path: d,\n      startLine\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Circuit Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), circuit ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: circuit.circuit.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 1600 800\",\n        width: \"100%\",\n        height: \"600\",\n        style: {\n          border: '1px solid black',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: pathData,\n          stroke: \"#555\",\n          strokeWidth: \"5\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 3\n        }, this), startMarker && /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: startMarker.x + 10 * Math.cos((startMarker.angle + 90) * Math.PI / 180),\n          y1: startMarker.y + 10 * Math.sin((startMarker.angle + 90) * Math.PI / 180),\n          x2: startMarker.x + 10 * Math.cos((startMarker.angle - 90) * Math.PI / 180),\n          y2: startMarker.y + 10 * Math.sin((startMarker.angle - 90) * Math.PI / 180),\n          stroke: \"black\",\n          strokeWidth: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Mini Sectores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: circuit.mini_sectors.map(ms => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: ms.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), \": \", ms.length_cm / 100, \" m,\", ms.curvature_radius_cm > 0 ? ` curva (${ms.curve_direction}, radio ${ms.curvature_radius_cm / 100} m)` : ` recta (dirección ${ms.direction}°)`]\n        }, ms.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Sectores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: circuit.sectors.map(s => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: s.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this), \": Mini sectores \", s.mini_sector_ids.join(', ')]\n        }, s.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading circuit...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Km57pzjukzSx9pNGwHBqUv+EGnQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","SCALE","App","_s","circuit","setCircuit","pathData","setPathData","startMarker","setStartMarker","get","then","res","data","path","startLine","generateCircuitSVG","sectors","mini_sectors","catch","console","error","allMiniSectors","length","firstSector","firstMiniSectorId","mini_sector_ids","firstMini","find","ms","id","x","y","angle","d","sector","isCurve","curvature_radius_cm","_sector$direction","length_cm","dx","Math","cos","PI","dy","sin","direction","radius","sweepFlag","curve_direction","normalAngle","cx","cy","endAngle","x1","y1","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","name","viewBox","width","height","border","marginBottom","stroke","strokeWidth","fill","x2","y2","map","s","join","_c","$RefreshReg$"],"sources":["C:/Users/gerar/Documents/Proyectos/Racing Manager/V1/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst SCALE = 0.01; // 1 cm = 0.01 px => 1 m = 1 px aprox\n\nfunction App() {\n  const [circuit, setCircuit] = useState(null);\n  const [pathData, setPathData] = useState('');\n  const [startMarker, setStartMarker] = useState(null);\n\n  useEffect(() => {\n    axios.get('http://localhost:3001/circuit/1')\n      .then(res => {\n        setCircuit(res.data);\n        const { path, startLine } = generateCircuitSVG(res.data.sectors, res.data.mini_sectors);\n        setPathData(path);\n        setStartMarker(startLine);\n      })\n      .catch(console.error);\n  }, []);\n\n  const generateCircuitSVG = (sectors, allMiniSectors) => {\n    if (!sectors || sectors.length === 0) return { path: '', startLine: null };\n  \n    // Obtener el primer mini sector del primer sector\n    const firstSector = sectors[0];\n    const firstMiniSectorId = firstSector.mini_sector_ids[0];\n    const firstMini = allMiniSectors.find(ms => ms.id === firstMiniSectorId);\n  \n    let x = 300;\n    let y = 200;\n    let angle = 0;\n    let d = `M ${x} ${y}`;\n  \n    let startLine = null; // { x, y, angle }\n  \n    for (let sector of allMiniSectors) {\n      const isCurve = sector.curvature_radius_cm > 0;\n  \n      // Marcar punto de meta justo antes de recorrer el primer mini sector\n      if (sector.id === firstMini.id) {\n        startLine = { x, y, angle };\n      }\n  \n      if (!isCurve) {\n        const length = sector.length_cm * SCALE;\n        const dx = Math.cos(angle * Math.PI / 180) * length;\n        const dy = Math.sin(angle * Math.PI / 180) * length;\n  \n        x += dx;\n        y += dy;\n        d += ` L ${x} ${y}`;\n        angle = sector.direction ?? angle;\n      } else {\n        const radius = sector.curvature_radius_cm * SCALE;\n        const sweepFlag = sector.curve_direction === 'clockwise' ? 1 : 0;\n  \n        const normalAngle = angle + (sweepFlag === 1 ? 90 : -90);\n        const cx = x + radius * Math.cos(normalAngle * Math.PI / 180);\n        const cy = y + radius * Math.sin(normalAngle * Math.PI / 180);\n  \n        const endAngle = angle + (sweepFlag === 1 ? 180 : -180);\n        const x1 = cx + radius * Math.cos((endAngle + (sweepFlag === 1 ? -90 : 90)) * Math.PI / 180);\n        const y1 = cy + radius * Math.sin((endAngle + (sweepFlag === 1 ? -90 : 90)) * Math.PI / 180);\n  \n        d += ` A ${radius} ${radius} 0 0 ${sweepFlag} ${x1} ${y1}`;\n  \n        x = x1;\n        y = y1;\n        angle = (endAngle + 360) % 360;\n      }\n    }\n  \n    return { path: d, startLine };\n  };\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1>Circuit Viewer</h1>\n\n      {circuit ? (\n        <>\n          <h2>{circuit.circuit.name}</h2>\n          <svg\n  viewBox=\"0 0 1600 800\"\n  width=\"100%\"\n  height=\"600\"\n  style={{ border: '1px solid black', marginBottom: '1rem' }}\n>\n  {/* Circuito gris más grueso */}\n  <path d={pathData} stroke=\"#555\" strokeWidth=\"5\" fill=\"none\" />\n\n  {/* Línea de meta más larga y gruesa */}\n  {startMarker && (\n    <line\n      x1={startMarker.x + 10 * Math.cos((startMarker.angle + 90) * Math.PI / 180)}\n      y1={startMarker.y + 10 * Math.sin((startMarker.angle + 90) * Math.PI / 180)}\n      x2={startMarker.x + 10 * Math.cos((startMarker.angle - 90) * Math.PI / 180)}\n      y2={startMarker.y + 10 * Math.sin((startMarker.angle - 90) * Math.PI / 180)}\n      stroke=\"black\"\n      strokeWidth=\"4\"\n    />\n  )}\n</svg>\n\n          <h3>Mini Sectores</h3>\n          <ul>\n            {circuit.mini_sectors.map(ms => (\n              <li key={ms.id}>\n                <strong>{ms.name}</strong>: {ms.length_cm / 100} m, \n                {ms.curvature_radius_cm > 0\n                  ? ` curva (${ms.curve_direction}, radio ${ms.curvature_radius_cm / 100} m)`\n                  : ` recta (dirección ${ms.direction}°)`\n                }\n              </li>\n            ))}\n          </ul>\n\n          <h3>Sectores</h3>\n          <ul>\n            {circuit.sectors.map(s => (\n              <li key={s.id}>\n                <strong>{s.name}</strong>: Mini sectores {s.mini_sector_ids.join(', ')}\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p>Loading circuit...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}